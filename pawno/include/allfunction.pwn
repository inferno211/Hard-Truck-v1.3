// UF02
GetWeaponType(weaponid);
GetWeaponSlot(weaponid);
ReturnWeaponName(weaponid);
SendClientMessageToAdmins(colour,const str[]);
SetCheckpointForAdmin(Float:x,Float:y,Float:z,Float:size);
DisableCheckpointForAdmin();
SetAdminColor(color);
IsValidPickup(model);
IsValidWeaponModel(model);
AddRandomWeaponPickup(Float:x,Float:y,Float:z);
SetObjectToFaceCords(objectid, Float:x1,Float:y1,Float:z1);
// UFALLPLAYERS
GetPlayers();
PlaySoundForAll(soundid);
SetAllColour(color);
KickAll();
SetCheckpointForAll(Float:x,Float:y,Float:z,Float:size);
SetRaceCheckpointForAll(type, Float:x, Float:y, Float:z, Float:nextx, Float:nexty, Float:nextz, Float:size);
DisableAllPlayersCheckpoints();
DisableAllPlayersRaceCheckpoints();
ClearChat();
SetAllWantedLevel(level);
GetPlayersOnline();
SetMapIcon(markertype, Float:x, Float:y, Float:z);
ShowMenuForAll(Menu:menuid);
//UFFUNCTION
encrypt(string[]);
left(source[], len);
right(source[], len);
parsecommand(cmdtext[], cmd[], text[], parcount);
minrand(min, max);
Float:floatrand(Float:min, Float:max);
Float:floatquad(Float:a,Float:b,Float:c);
FloatMutliply(Float:data1,Float:data2);
FloatDivide(Float:data1,Float:data2);
IsFloatSize(Float:value,size);
IsFloatBigger(float:data1,Float:data2);
IsFloatSmaller(float:data1,Float:data2);
Divide(data1,data2);
Square(Float:num);
FloatDecrease(Float:data1,Float:data2);
RetStr(num);
ValidEmail(email[]);
Float:lengthdir_x(Float:length,Float:angle);
Float:lengthdir_y(Float:length,Float:angle);
Float:isin(Float:opp,Float:hyp);
Float:icos(Float:adj,Float:hyp);
Float:itan(Float:opp,Float:adj);
RadiansToDegrees(Float:radian);
Float:DegreesToRadians(Float:degrees);
str_replace(search[], replace[], source[]);
str_replaceEx(search[], replace[], source[]);
str_replaceEx2(search[],replace[],source[]);
strinject(source[], adress, injection[]);
sprintf(const Format[], {Float,_}:...);
strfloat(Float:value);
strsep(const str[] , &idx , sep1=',' , sep2='?' , sep3=':' , sep4=' ');
StripChr(string[],chr);
StrToHacker(string[]);
strequal(string1[],string2[],bool:ignorecase=true,start=0,end=256);
strsplit(string[],start,end);
strvalue(string[]);
strtoval(strText[]);
strpart(string[], start, end);
strrest(const string[], index);
strswap (a[], b[]);
varswap (&a, &b);
sscanf(string[], format[], {Float,_}:...);
split(const strsrc[], strdest[][], delimiter, maxitems);
ReadParam(strParams[], nParam);
print_array(array[],array_size = sizeof array);
print_doublearray(array[][],array_size = sizeof array,subarray_size = sizeof array[]);
t_print(const string1[]);
fcreate(filename[]);
fdeleteline(filename[], line[]);
CreateAndIntSet(filename[],key[],val[]);
CreateAndFloatSet(filename[],key[],Float:value);
CreateAndNumSet(filename[],key[],Float:value);
FileSize(filename[]);
fconfig(filename[],key[],seperator=' ',bool:ignorecase=true);
GetFileAttributes(filename[],&bytes,&lines);
PrintFileLines(filename[],Start,End);
dini_Add(file[], key[], value);
charfind(string[],character);
chrfind(needle, haystack[], start = 0);
charpos(const string[], character = ' ', index = 0);
Chr(val);
reversejenkins(string[]);
jenkins(string[]);
bernstein(string[]);
RandomEx(max,...);
RandomString(len,bool:lenrand = true);
concat(str[], len, ...);
YomHash(buffer[]);
RMB1(buf[]);
IsNumeric(const string[]);
IsNumericEx(const string[]);
IsNumberEven(number);
IsNumberEvenEx(number);
IsNumberOdd(number);
MultiNumeric(d1,d2,d3,d4,d5,d6);
NumLength(data1);
NumExt(const string[], const sub[]);
RGBAToHex(r, g, b, a);
HexToRGBA(colour, &r, &g, &b, &a);
IsHex(const string[]);
IsAlpha(const string[]);
IsSymbol(const string[]);
GetCaps(const ascii);
SetCaps(string[],caps);
AsInteger({Float,_}:...);
bool:AsBool({Float,_}:...);
Float:AsFloat({Float,_}:...);
AsString({Float,_}:...)
Hello({Float,_}:...);
CombSort(lArray[], lArraySize = sizeof(lArray));
ShellSort(lArray[], lArraySize = sizeof(lArray));
_Insert(lArray[], lLength, lValue);
InsertionSort(lArray[], lArraySize = sizeof(lArray));
GnomeSort(lArray[], lArraySize = sizeof(lArray));
SelectionSort(lArray[], lArraySize = sizeof(lArray));
BubbleSort(lArray[], lArraySize = sizeof(lArray));
CocktailSort(lArray[], lArraySize = sizeof(lArray));
quickSort(numbers[], arraySize);
q_sort(numbers[], left, right);
WhichBig(i,j,k,x);
Big(...);
Max(...);
Min(...);
ranstr(length);
ranstrEx(length);
ranstrEx2(string[], length);
GetInvalidCharacter(text[]);
DeleteDoubleCharacters(string[]);
GetXYOnCircle(&Float:x, &Float:y, Float:cx, Float:cy, Float:radius, Float:angle);
GetRandomCirclePos(Float:x,Float:y,Float:radius,&Float:x2,&Float:y2);
QuadFormula(a,b,c);
TwoWayRand(value);
Factorial(value);
IntDivide(data1,data2);
Add(data1,data2);
Subtract(data1,data2);
multiply(data1,data2);
QuadraticRootCalc(Float:Xsq,Float:X,Float:num);
ReverseStr(string[]);
MulStrings(const string[], const str[]);
Strsub(const string[], const sub[]);
IsStringLength(const string[], length);
SearchAndDelete(const string[],const sub[]);
IsSize(const string[],size);
CombineString(const string[], const str[]);
IsStringSameEx(string1[], string2[], len);
ConvertToSafeInput(input[], dest[]);
randlet(max);
IsStringIP(string[]);
GameTextCheck(const string[]);
randarg( ... );
FixChars(string[]);
FilterCaps(string[]);
//UFOTHERS
GetXYZZoneName(Float:x, Float:y, Float:z);
GetXYZZoneID(Float:x, Float:y, Float:z);
IsXYZInZone(Float:x, Float:y, Float:z, zoneid);
IsPlayerInZone(playerid, zoneid);
IsPlayerInZoneName(playerid, zonename[]);
GetRandomWeather(weather, ...);
GetSequencedWeather(hour);
Timer_DayHeartbeat();//Needs this in OnGameModeInit(): SetTimer("Timer_DayHeartbeat", 60000, 1);
//UFPLAYERS
GetPlayerId(playername[]);
GetMatchingID(string[]);
Float:GetPlayerArmourEx(playerid);
ReturnPlayerName(playerid);
Player(playerid);
Killer(killerid);
ReturnUser(text[], playerid = INVALID_PLAYER_ID);
ReturnUserEx(text[], id = INVALID_PLAYER_ID)
SetPlayerMoney(playerid,money);
PlayerID(partofname[]);
IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy);
IsPlayerIn2DArea(playerid, Float:data[4]);
IsPlayerInCube(playerid, xmin, ymin, zmin, xmax, ymax, zmax);
IsPlayerIn3DArea(playerid, Float:data[6]);
IsPlayerInAreaEx(playerid, Float:...);
IsPlayerInRange(playerid, Float: Range, Float: Z_Range, Float:tar_x, Float:tar_y, Float:tar_z);
GetDistanceBetweenPlayers(playerid, playerid2);
GetClosestPlayer(playerid);
GetDistanceToCar(playerid,vehicleid);
GetPlayerDistanceToPoint(playerid,Float:x,Float:y);
GetPlayerDistanceToPointEx(playerid,Float:x,Float:y,Float:z);
IsPlayerInCircle(playerid,Float:x,Float:y,radius);
IsPlayerInSphere(playerid,Float:x,Float:y,Float:z,radius);
GetPointDistanceToPoint(Float:x,Float:y,Float:x2,Float:y2);
GetPointDistanceToPointEx(Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2);
GetDistancePointToPoint(Float:pos1[2], Float:pos2[2]);
GetDistancePointToPointIx(Float:pos1[3], Float:pos2[3]);
GetPointDistanceToPoint2(Float:...);
GetDistancePlayerToPoint(playerid, Float:pointpos[2]);
GetDistancePlayerToPointIx(playerid, Float:pointpos[3]);
GetDistancePlayerToPlayer(playerid1, playerid2);
GetPlayerDistanceToHeight(playerid,Float:z);
GetPlayerDistanceToHeightEx(playerid, Float:Z);
GetPlayerDistanceToHeightEx2(playerid, Float:Z);
PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
SendFormattedGameTextToPlayer(playerid, const msg[], time, style, define);
SendFormattedGameTextToAll(const msg[], time, style, define);
SendPlayerFormattedText(playerid, const Format[], {Float,_}:...);
GetCurrentPosition(playerid);
TakePlayerMoney(playerid,money);
PlayerPlaySoundEx(playerid,soundid);
GivePlayerWeaponEx( playerid, ... );
SendClientMessageToAllOthers(playerid, color, const message[]);
GameTextForAllOthers(playerid, const string[], time, style);
SendMultipleClientMessages(playerid,colour,text[],...);
SetPlayerColourAlpha(playerid, alpha);
Eraser(playerid, lines);
wiper(playerid);
Float:GetPlayerTheoreticAngle(i);
GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance);
GetXYInFrontOfPlayerEx(playerid, &Float:x, &Float:y, Float:distance);
GetTheoreticalPlayerCameraPos(playerid,&Float:x,&Float:y,&Float:z);
GetXYBehindPlayer(playerid, &Float:x, &Float:y, Float:distance);
SetPlayersPosInCircle(Float:X, Float:Y, Float:Z, Float:radius);
GetPlayerClan(playerid);
FindTag(name[],tag[]);
ToggleBlipVisibilty(playerid, bool:visible);
GetPlayeridMid(name[]);
VL_SetPlayerSkin(playerid, skinid);
SetPlayerIntBounds(playerid, Float:xmax, Float:xmin, Float:ymax, Float:ymin, Float:zmin) //Needs this in OnGameModeInit(): SetTimer("CheckInternalBounds", 500, 1);
ResetBounds(playerid);
AddPlayerHealth(playerid, Float:health);
AddWantedLevel(playerid, pLevel);
AddPlayerArmour(playerid, Float:armour);
AddPlayerAmmo(playerid, weaponslot, ammo);
SetPlayerTotalAmmo(playerid, ammo);
PutCameraBehindPlayer(playerid);
PutCameraBehindPlayerEx(playerid);
IsDead(playerid);
CreateExplosionSounds(DUR_EXP, NUM_EXP);
GetLowestPlayerid();
GetHighestPlayerid();
GetNumberedPlayerid(number);
AddAllClass(Float:x,Float:y,Float:z,Float:r,w1,a1,w2,a2,w3,a3);
AddAllClassEx(Float:x,Float:y,Float:z,Float:r,w1,a1,w2,a2,w3,a3,bool:ignore[300]=false);
IsVehicleSkinCompatible_TF(skinid);
IsVehicleSkinCompatible_WAA(skinid);
IsVehicleSkinCompatible_LLC(skinid);
IsValidSkin(skinid);
IsHealth(playerid,Float:Health);
IsScore(playerid,score);
IsColor(playerid,color);
ShowRatio(playerid,data1,data2);
SyncClockByPlayer(playerid);
ReturnIP(playerid);
SetTextShowTime(playerid, Msg[], Float:X, Float:Y, time, align = 0, color = 0xFFFFFFFF, box = 0, boxcolor = 0xFFFFFFAA, Shadow = 0, outline = 0, bgcolor = 0xFFFFFF00, prop = 0, type = 0);
//UFTEAM
GameTextForTeam(team, text[], time, style);
SendClientMessageToTeam(team, color, text[]);
SetTeamScore(team, score);
GiveTeamMoney(team, amount);
SetTeamMoney(team,howmuch);
HowManyPlayersInTeam(team);
GetPlayerTeamEx(playerid);
SendClientMessageToTeamsBut(team,color,message[]);
IsTeamDead(Team);
TextDrawShowForTeam(team, Text:text);
TextDrawHideForTeam(team, Text:text);
TextDrawShowForTeamsBut(team, Text:text);
TextDrawHideForTeamsBut(team, Text:text);
SetPlayerPosAndTeam(playerid,team,Float:x,Float:y,Float:z);
SetTeamPos(team,Float:x,Float:y,Float:z);
SetTeamInterior(team,interiorid);
SetTeamHealth(team,Float:Health);
KillTeam(team);
SetgTeam(playerid,team);
SetTeamColor(team,color);
SetTeamCheckpoint(team,Float:x,Float:y,Float:z,Float:size);
DisableTeamCheckpoint(team);
SetRaceCheckpointForTeam(type, Float:x, Float:y, Float:z, Float:nextx, Float:nexty, Float:nextz, Float:size);
DisableTeamRaceCheckpoints();
ResetTeamMoney(team);
PlaySoundForTeam(team,soundid);
GiveTeamWeapon(team,w1,a1);
SetTeamCameraPos(team,Float:x,Float:y,Float:z);
FreezeTeam(team,bool:toggle);
ToggleTeamVisibility(team,bool:visible);
SpamTeam(team);
KickTeam(team);
BanTeam(team);
SetTeamSpawnInfo(team,modelid,Float:x,Float:y,Float:z,Float:angle,w1,a1,w2,a2,w3,a3);
IsTeamInCheckpoint(team);
SetTeamWorldBounds(team,Float:xmin,Float:xmax,Float:ymin,Float:ymax);
ResetTeamWorldBounds(team);
SetTeamFacingAngle(team,Float:angle);
SetVehicleParamsForTeam(team,vehicleid,objective,locked);
IsgTeam(playerid,team);
//UFTIME
ConvertSeconds(time);
timeconvert_seconds(time);
timeconvert(Time, &Minutes, &Seconds, &MSeconds);
time(timestamp,monthlengh = 30);
GetWeekdayNum(d,m,y);
GetWeekday(d,m,y);
GetTodayWeekdayNum();
GetTodayWeekday();
getrem(a,b);
RealTime();
Wait(time);
GetWorldTime();
ConvertMS(time);
ConvertSeconds(time);
ConvertMinutes(time);
//UFVEHICLE
VehicleDriverID(vehicleid);
GetVehicles();
VehicleDriverName(vehicleid);
IsPlayerPassenger(playerid);
IsPlayerDriver(playerid);
IsPlayerOnFoot(playerid);
IsPlayerWasted(playerid);
IsPlayerSpawned(playerid);
IsPlayerSpectating(playerid);
IsPlayerOnBike(playerid);
IsPlayerOnBicycle(playerid);
IsPlayerInBoat(playerid);
IsPlayerInHelicopter(playerid);
IsPlayerInMonsterTruck(playerid);
IsPlayerInPlane(playerid);
IsPlayerInQuad(playerid);
IsPlayerInCar(playerid);
IsPlayerInRCCam(playerid);
GetVehicleName(vehicleid);
IsVehicleInUse(vehicleid);
AddStaticVehicle2(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2);
AddStaticVehicleLine(Modelid, Float:Start[2], Float:Rate[2], Float:Z, Float:Z_Angle, MaxAmount);
GetVehicleType(vid);
AddVehicleHealth(vehicleid, Float:health);
AddVehicleComponents(vehicleid, ...);
AddRandomVehicle(Float:x,Float:y,Float:z,Float:angle);
AddVehicle(modelid,Float:x,Float:y,Float:z,Float:angle,color1,color2);
AddCircleOfStaticVehicles(vehicleid, Float:X, Float:Y, Float:Z, Float:radius, num_of_vehicles, color1, color2);
AddStaticVehicle2(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, interiorid);
IsVehicleHavePassegner(vehicleid);
PlacePlayerInParamsVehicle(playerid);
AddCircleOfVehiclesEx(model, Float:X, Float:Y, Float:Z, Float:A, Float:dis, ilosc, c1, c2);
//ALL LINES - 8 == ALL FUNCTION :P (338)
